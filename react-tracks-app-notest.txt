Frontend = React
Backend = Django + Graphql

1. Install django, graphene-django, django-graphql-jwt, django-cors-headers
    $pipenv install django graphene-django django-graphql-jwt django-cors-headers

2. Install Codeformatter = autopep8 as a dev package.
    $pipenv install --dev autopep8

3. Create a django project called app.
    $django-admin startproject app

4. Create an initial database setup using manage.py file.
    $cd app
    $python manage.py migrate  #creates the sqlite3 database.

5. Start the Django Server to check if it is working properly.
    $python manage.py runserver

6. Django separates the project into individual apps. We need individual app according to the type of data the app will have.
    In this project we have two types: a) Tracks.
                                        b) Users.
7. To create an app in Django:
    $python manage.py startapp tracks

8. We need to model the tracks app. To build out the features of tracks app.
    $cd tracks
    $ open models.py

9. Create a Track model class with fields title,description, url, created_at.

10. To activate the model, go to app/app/settings.py
    - Add the app name 'tracks' in the INSTALLED_APPS section.

11. To update the database according to the Model, We make migrations.
    -$python manage.py makemigrations
    - $python manage.py migrate

12. To write the data to database we can use django admin page or django interactive shell.
    - $python manage.py shell #Starts the django shell.
    - $from tracks.models import Track # To access the Track Model
    - $Track.objects.create(title="title1", description="Track1 desc", url="https://track1.com") # Inserts the values to Track Table.
    - $exit() #To exit from interactive shell.

13. We now need to use graphene(graphql library of python).
    - In app/app/settings.py add 'graphene_django' in INSTALLED_APPS Section.
    - Also, add a section: GRAPHENE = { 'SCHEMA': 'app.schema.schema'} # Allows to import graphene in schema.py

14. Create schema file inside tracks app which allows to query the database using graphene.
        - Returns all the tracks

15. Create a generic schema file that can be used across apps(tracks, users).

16. To interact with the data, we use graphiql ide.
    - Go to app/app/urls.py
    - add url pattern to access the ide.

17. To dynamically create a track, we need mutation to create a track.
    - Go to app/tracks/schema.py
    - Create Mutation class called as createTrack.
    - Go to app/app/schema.py and include the Mutation class and add it to the schema.

18. Create the users app.
    - Create app/users/schema.py
    - We don't have to create separate Model for users as Django gives a robust user model out of the box.

19. Created the schema for users and also created a query to get user details by Id.

20 . Now need to authenticate the users using Django-Graphql JWT.
    - $Go to app/app/settings.py
    - In MIDDLEWARE Section, add the following:
        'django.contrib.auth.middleware.AuthenticationMiddleware',
    - Add graphene section
    - Add JSONWebTokenBackend also.
    Refer the this link: https://django-graphql-jwt.domake.io/en/latest/quickstart.html

21. Create a query to validate the user in users/schema.py

22. Install insomnia tool which is used to send the JWT to http headers using graphql.

23. Connecting users and Tracks.
    - Modify the Tracks Model by adding a Field called as "posted_by" (1:N relationship) Therefore it is a foreign key here.
24. Now since the model is modified apply the migrations.




